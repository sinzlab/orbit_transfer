import copy
import torch
import datajoint as dj
import numpy as np
import matplotlib.pyplot as plt

from bias_transfer.configs.dataset.mnist_1d import MNIST1DDatasetConfig
from nntransfer.tables import nnfabrik
import pickle as pkl
import tempfile
import requests


@nnfabrik.schema
class DataStorage(dj.Manual):
    storage = "minio"

    @property
    def definition(self):
        definition = """
        # Contains the data generated by the transfer step, stored externally.
        id: varchar(128)
        ---
        data:            attach@{storage}
        """.format(
            storage=self.storage
        )
        return definition


def plot_signals(
    xs,
    t,
    labels=None,
    args=None,
    ratio=2.6,
    do_transform=False,
    dark_mode=False,
    zoom=1,
):
    rows, cols = 1, 10
    fig = plt.figure(figsize=[cols * 1.5, rows * 1.5 * ratio], dpi=60)
    for r in range(rows):
        for c in range(cols):
            ix = r * cols + c
            x, t = xs[ix], t
            ax = plt.subplot(rows, cols, ix + 1)

            # plot the data
            #             if do_transform:
            #                 assert args is not None, "Need an args object in order to do transforms"
            #                 x, t = transform(x, t, args)  # optionally, transform the signal in some manner
            if dark_mode:
                plt.plot(x, t, "wo", linewidth=6)
                ax.set_facecolor("k")
            else:
                plt.plot(x, t, "k-", linewidth=2)
            if labels is not None:
                plt.title("label=" + str(labels[ix]), fontsize=22)

            plt.xlim(-zoom, zoom)
            plt.ylim(-zoom, zoom)
            plt.gca().invert_yaxis()
            plt.xticks([], []), plt.yticks([], [])
    plt.subplots_adjust(wspace=0, hspace=0)
    plt.tight_layout()
    plt.show()
    return fig




def dataset_fn(seed, **config):
    config = MNIST1DDatasetConfig.from_dict(config)
    print("Loading dataset: {}".format(config.dataset_cls))
    torch.manual_seed(seed)
    np.random.seed(seed)

    if config.orignial:
        url = 'https://github.com/greydanus/mnist1d/raw/master/mnist1d_data.pkl'
        r = requests.get(url, allow_redirects=True)
        open('./mnist1d_data.pkl', 'wb').write(r.content)
        with open('./mnist1d_data.pkl', "rb") as handle:
            data = pkl.load(handle)
    else:
        with tempfile.TemporaryDirectory() as temp_dir:
            data_path = (DataStorage & {"name": "mnist1d_raw"}).fetch1("data", download_path=temp_dir)
            with open(data_path, 'rb') as f:
                data = pkl.load(f)

    # split training into validation and training
    val_size = int(len(data["x"]) * config.valid_size)
    indices = np.random.permutation(len(data["x"]))
    val_idx, training_idx = indices[:val_size], indices[val_size:]
    data["x"], data["x_validation"] = data["x"][training_idx, :], data["x"][val_idx, :]
    data["y"], data["y_validation"] = data["y"][training_idx], data["y"][val_idx]

    train_data = copy.deepcopy(data)
    test_data = copy.deepcopy(data)

    if config.train_shift:
        def shift_data(data, min_shift, max_shift):
            for l in ["x", "x_test", "x_validation"]:
                shift = np.random.randint(min_shift, max_shift, data[l].shape[0])
                for i in range(data[l].shape[0]):
                    data[l][i] = np.roll(data[l][i], shift[i], axis=-1)
        shift_data(train_data, 0, config.train_shift)
        shift_data(test_data, config.train_shift, 40)

    return {"train": train_data, "test": test_data}
